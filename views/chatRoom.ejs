<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
 <style>
  body{
    display: flex;
    justify-content: center;
   
    height: 100vh;
    margin: 0;
background-color: #E7F0DC;

}
.chatBox{
  display:  flex;
  flex-direction: column;
align-items: flex-start;
position: relative;
width: 400px;
height: 500px;
background-color: #F5F7F8;
border-radius: 15px;
border: 2px solid #729762;
}
#MsgBox{
width: 350px;
height: 24px;
border: 1px solid #658147;
border-bottom-left-radius: 12px;
margin-top: auto;
font-size: 15px;
font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
overflow-x: scroll;
overflow-x: hidden;
scrollbar-width: none; /* Hide scrollbar for Firefox */
    -ms-overflow-style: none; /* Hide scrollbar for IE/Edge */
}

#msg-con::-webkit-scrollbar {
    display: none; /* Hide scrollbar for Chrome, Safari, and Opera */
}
#MsgBox:focus {
    border-color: #658147; /* Set border color when input is focused */
    outline: none; /* Optional: Remove default browser outline */
}
#sendBtn{
  
  width: 50px;
  height: 29px;
  border: 2px solid #658147;
border-bottom-right-radius: 12px;
background-color: #658147;
color: white;
font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;

cursor: pointer;
    transition: background-color 0.3s, transform 0.2s ease-out;
}

#sendBtn:hover {
    background-color: #4e944e; /* Darker shade when hovered */
}

#sendBtn:active {
    transform: scale(0.95); /* Slightly shrink on click */
}
.UserName{
  display: flex;
justify-content: space-between;
   position: fixed;
top: 0;
left: 0;
width: 100%;
background-color: #288432;
color: white;
padding: 10px 20px;
box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
z-index: 1000; /* Ensure it's above other content */
font-size: 18px;
font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    
}
h1{
  margin-top: 50px;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.footerbox{

  display: flex; /* Use flexbox for the container */
            justify-content: space-between; /* Align items with space between them */
            width: 100%;
            margin-top: auto;
}
#msg-con{
  display: flex;
  flex-direction: column;
  height: 440px;
  width: 350px;
  overflow-x: hidden;
  
}
.msg-left{
  list-style: none;
  padding: 2px  10px;
  margin-bottom: 12px;
  margin-left: -20px;
  max-width: 250px;
  word-wrap: break-word;
  font-size: 18px;
  background-color: #E7F0DC;
  border-radius: 0px 10px 10px 10px;
  align-self: flex-start;
  box-shadow: 2px 2px 4px grey;

}

.msg-right{
color: white;
  list-style: none;
  padding: 2px 10px;
  margin-bottom: 12px;
  max-width: 250px;
  word-wrap: break-word;
  font-size: 18px;
  background-color: #365E32;
  border-radius: 10px 10px 0px 10px;
  align-self: flex-end;
  box-shadow: 2px 2px 4px  grey;
}
.msg-feedback{
  text-align: center;
  list-style: none;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
font-style: italic;
color:black;
}
span{
  display: block;
  font-style: italic;
  font-size: 14px;
  margin-top: -9px;
}
#UserName{
  border: 1px solid #729762;
  border-radius: 10px;
  height: 28px;
  font-size: 20px;
  color: #365E32;
  text-align: center;
}




 </style>

</head>
<body>
 <div class="container">
  <h1 style="text-align: center; color: #288432; font-weight: 600 ">  weChat </h1>
  <div class="UserName">
    <div>
    User : <input id="UserName" type="text"></div>
    <div id="total-user" style="margin-right: 60px;">Total Clinet : 1</div>
  
  </div>

 <div class="chatBox">
  <ul id="msg-con">
    <li class="msg-left">
      <p>
        lorem
      </p>
      <span>gibtrih 1221</span>
    </li>
    <li class="msg-right">
      <p>msg</p>
      <span>time time </span>
    </li>
    <li class="msg-feedback">
<p>tying!111111111</p>
    </li>
  </ul>


  <div class="footerbox">
    <input type="text" id="MsgBox">
    <button type="button" id="sendBtn">Send</button> 
  </div>
 
 </div>
 </div>
  
 <script src="https://cdn.jsdelivr.net/npm/moment/moment.min.js"></script>

 <script src="/socket.io/socket.io.js"></script>


    <!-- Initialize Socket.IO connection -->
    <script>
        const socket = io( "http://localhost:3000/");
        const TotalClinet= document.getElementById("total-user");
        const UserName= document.getElementById("UserName");
        const msgContainer= document.getElementById("msg-con");
        const sendFeedback=document.getElementById("msg-feedback");
        const msgInput=document.getElementById("MsgBox");
        const sendButton= document.getElementById("sendBtn");
   

        


        socket.on("Total-Client", (data)=>{
          TotalClinet.innerHTML= `Total-Clients: ${data}`;
         
          console.log(data);

        })

        sendButton.addEventListener('click', ()=>{
          sendMessage();

        })

        function sendMessage(){
          if(msgInput.value==="") return;
          console.log(msgInput.value);
          const data= {
            name:"Anonyms",
            message:msgInput.value,
            dateAndTime: new Date(),
          }
        msgInput.value="";
        socket.emit("message" , data);
        addMessageToUi(true, data);

        }
        socket.on("userMessage", (data)=>{
          addMessageToUi(false, data);
        })

        function addMessageToUi(isOwnMsg, data){
          clearMsgFeedback();

          const element= `<li class= "${isOwnMsg ? "msg-right" : "msg-left"}">
      <p>
        ${data.message}
      </p>
      <span>${moment(data.dateAndTime).fromNow()}</span>
    </li>`
    msgContainer.innerHTML+=element;
    scrollToBottom();
        }
        function scrollToBottom(){
          msgContainer.scrollTo(0, msgContainer.scrollHeight);
        }

        /*msgInput.addEventListener('focus', (e)=>{
          console.log(UserName.value);
          clearMsgFeedback();
          socket.emit("feedback", {
            
            feedback:`${UserName.value} is typing ` ,
          })
          

        })*/
    /*  msgInput.addEventListener('keypress', (e)=>{
         socket.emit("feedback", {
            feedback:`${UserName.value} is typing ` ,
          })

        })*/
        let typingTimeout; // Variable to hold the timeout ID

msgInput.addEventListener('keypress', (e) => {
    // Clear previous timeout if exists
    clearTimeout(typingTimeout);

    // Set a new timeout of 500ms (adjust this value as needed)
    typingTimeout = setTimeout(() => {
        socket.emit("feedback", {
            feedback: `${UserName.value} is typing`
        });
    }, 8000); // 500 milliseconds delay
});

        msgInput.addEventListener('blur', (e)=>{
          socket.emit("feedback", {
            feedback:'' ,
          })
        })

        socket.on("feedback", (data)=>{
          
          const feeedbackElement= `<li class="msg-feedback">
<p>${data.feedback}</p>
    </li>`
    msgContainer.innerHTML+=feeedbackElement;
    scrollToBottom();
    
        })
        function clearMsgFeedback(){
          document.querySelectorAll("li.msg-feedback").forEach(element=>{
            element.parentNode.removeChild(element);
          })
        }
        

        
        

    </script>

</body>
</html>